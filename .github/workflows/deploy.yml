name: Build and Deploy

on:
  push:
    branches:
      - main
      - develop
      - iteration1
      - iteration2
      - iteration3

env:
  # Frontend Environment Variables
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_API_KEY: ${{ secrets.NEXT_PUBLIC_API_KEY }}
  NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
  NEXT_PUBLIC_MAP_ID: ${{ secrets.NEXT_PUBLIC_MAP_ID }}
  NEXT_PUBLIC_SITE_PASSWORD: ${{ secrets.NEXT_PUBLIC_SITE_PASSWORD }}
  # Backend Environment Variables
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DJANGO_API_KEY: ${{ secrets.DJANGO_API_KEY }}
  DJANGO_ALLOWED_ORIGIN: ${{ secrets.DJANGO_ALLOWED_ORIGIN }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
  # AWS Environment Variables
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_KEY: ${{ secrets.EC2_KEY }}
  # Deployment Environment Variables
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  determine-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      api_url: ${{ steps.set-tag.outputs.api_url }}
    steps:
      - name: Set tag and API URL based on branch
        id: set-tag
        run: |
          if [ "$GITHUB_REF" = "refs/heads/iteration1" ]; then
            echo "tag=iteration1" >> $GITHUB_OUTPUT
            echo "api_url=${NEXT_PUBLIC_API_URL}/iteration1" >> $GITHUB_OUTPUT
          elif [ "$GITHUB_REF" = "refs/heads/iteration2" ]; then
            echo "tag=iteration2" >> $GITHUB_OUTPUT
            echo "api_url=${NEXT_PUBLIC_API_URL}/iteration2" >> $GITHUB_OUTPUT
          elif [ "$GITHUB_REF" = "refs/heads/iteration3" ]; then
            echo "tag=iteration3" >> $GITHUB_OUTPUT
            echo "api_url=${NEXT_PUBLIC_API_URL}/iteration3" >> $GITHUB_OUTPUT
          elif [ "$GITHUB_REF" = "refs/heads/develop" ]; then
            echo "tag=develop" >> $GITHUB_OUTPUT
            echo "api_url=${NEXT_PUBLIC_API_URL}/develop" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "api_url=${NEXT_PUBLIC_API_URL}" >> $GITHUB_OUTPUT
          fi

  build-frontend:
    needs: determine-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push frontend Docker image
        run: |
          cd frontend
          docker buildx build \
            --build-arg NEXT_PUBLIC_API_URL=${{ needs.determine-tag.outputs.api_url }} \
            --build-arg NEXT_PUBLIC_API_KEY=${NEXT_PUBLIC_API_KEY} \
            --build-arg NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY} \
            --build-arg NEXT_PUBLIC_MAP_ID=${NEXT_PUBLIC_MAP_ID} \
            --build-arg NEXT_PUBLIC_BRANCH_NAME=${{ github.ref_name }} \
            --build-arg NEXT_PUBLIC_SITE_PASSWORD=${NEXT_PUBLIC_SITE_PASSWORD} \
            -t ${{ env.DOCKER_USERNAME }}/bestbefore-frontend:${{ needs.determine-tag.outputs.tag }} \
            --platform linux/amd64 --push \
            .

  build-backend:
    needs: determine-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push backend Docker image
        run: |
          cd backend
          docker buildx build \
            -t ${{ env.DOCKER_USERNAME }}/bestbefore-backend:${{ needs.determine-tag.outputs.tag }} \
            --platform linux/amd64 --push \
            .

  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          EC2_USER: ${{ env.EC2_USER }}
          EC2_HOST: ${{ env.EC2_HOST }}
          EC2_KEY: ${{ env.EC2_KEY }}
          BRANCH: ${{ github.ref_name }}
        run: |
          echo "${{ env.EC2_KEY }}" > ec2-key.pem
          chmod 400 ec2-key.pem
          file ec2-key.pem
          
          # Create .env file
          cat > .env << EOF
          DOCKER_USERNAME=${{ env.DOCKER_USERNAME }}
          DJANGO_SECRET_KEY=${{ env.DJANGO_SECRET_KEY }}
          DJANGO_API_KEY=${{ env.DJANGO_API_KEY }}
          DJANGO_ALLOWED_ORIGIN=${{ env.DJANGO_ALLOWED_ORIGIN }}
          DB_NAME=${{ env.DB_NAME }}
          DB_USER=${{ env.DB_USER }}
          DB_PASSWORD=${{ env.DB_PASSWORD }}
          DB_HOST=${{ env.DB_HOST }}
          DB_PORT=${{ env.DB_PORT }}
          CLAUDE_API_KEY=${{ env.CLAUDE_API_KEY }}
          NEXT_PUBLIC_SITE_PASSWORD=${{ env.NEXT_PUBLIC_SITE_PASSWORD }}
          EOF
          
          # Transfer .env file to EC2
          scp -o StrictHostKeyChecking=no -i ec2-key.pem .env ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/
          
          # Transfer and run deploy script
          scp -o StrictHostKeyChecking=no -i ec2-key.pem deploy.sh ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/home/${{ env.EC2_USER }}/
          ssh -o StrictHostKeyChecking=no -i ec2-key.pem ${{ env.EC2_USER }}@${{ env.EC2_HOST }} 'bash /home/${{ env.EC2_USER }}/deploy.sh' ${{ github.ref_name }}